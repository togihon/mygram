basePath: /
definitions:
  entity.Response:
    properties:
      data: {}
      message:
        example: created
        type: string
      success:
        example: true
        type: boolean
    type: object
  entity.ResponseFailed:
    properties:
      message:
        example: success
        type: string
      success:
        example: true
        type: boolean
    type: object
  entity.ResponseLogin:
    properties:
      data:
        properties:
          token:
            example: eyJhbGciOiJI....
            type: string
        type: object
      message:
        example: success
        type: string
      success:
        example: true
        type: boolean
    type: object
  entity.ResponseRegister:
    properties:
      data:
        properties:
          age:
            example: 18
            type: integer
          email:
            example: user@mail.com
            type: string
          id:
            example: 1
            type: integer
          username:
            example: user
            type: string
        type: object
      message:
        example: success
        type: string
      success:
        example: true
        type: boolean
    type: object
  entity.ResponseSuccess:
    properties:
      message:
        example: success
        type: string
      success:
        example: true
        type: boolean
    type: object
host: https://mygram-production-2f89.up.railway.app
info:
  contact:
    email: togi.mare@gmail.com
    name: API Support
    url: http://www.swagger.io/support
  description: |-
    This is an API for MyGram APP. To use all of the services, please login first and get the token.
    After that, click the "Authorize" button at the right and a pop-up window will appear. type "Bearer <your-token>". Example: Bearer eyJhbGciOiJIUzI1...
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: MyGram API
  version: "1.0"
paths:
  /comments:
    get:
      description: User can retrieve all comments and no need to login
      produces:
      - application/json
      responses:
        "200":
          description: Will send all comments
          schema:
            $ref: '#/definitions/entity.Response'
        "404":
          description: If there is no comment, error will appear
          schema:
            $ref: '#/definitions/entity.ResponseFailed'
      summary: Get all comments
      tags:
      - comments
  /comments/{id}:
    delete:
      description: User can delete their own comment.
      parameters:
      - description: comment id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: If comment is exist and it's your own comment
          schema:
            $ref: '#/definitions/entity.ResponseSuccess'
        "400":
          description: If the comment's id is not your own and if the comment doesn't
            exist, error will appear
          schema:
            $ref: '#/definitions/entity.ResponseFailed'
      security:
      - Bearer: []
      summary: Delete a comment
      tags:
      - comments
    get:
      description: User can retrieve a comment and no need to login
      parameters:
      - description: comment id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: If a comment's id matches with the parameter
          schema:
            $ref: '#/definitions/entity.Response'
        "404":
          description: If the comments's id doesn't match with the parameter, error
            will appear
          schema:
            $ref: '#/definitions/entity.ResponseFailed'
      summary: Get one comment
      tags:
      - comments
    put:
      description: User can edit their own comment.
      parameters:
      - description: comment id
        in: path
        name: id
        required: true
        type: integer
      - description: your comment
        in: formData
        name: message
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: If all the parameters are valid
          schema:
            $ref: '#/definitions/entity.Response'
        "404":
          description: If there is something wrong, error will appear
          schema:
            $ref: '#/definitions/entity.ResponseFailed'
      security:
      - Bearer: []
      summary: Edit a comment
      tags:
      - comments
  /comments/{photoID}:
    post:
      description: User can create a comment.
      parameters:
      - description: photo id
        in: path
        name: photoID
        required: true
        type: integer
      - description: your comment
        in: formData
        name: message
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: If all of the parameters filled and you're login
          schema:
            $ref: '#/definitions/entity.Response'
        "401":
          description: If you are not login or some parameters not filled, error will
            appear
          schema:
            $ref: '#/definitions/entity.ResponseFailed'
        "404":
          description: If photo id's not found
          schema:
            $ref: '#/definitions/entity.ResponseFailed'
      security:
      - Bearer: []
      summary: Create a comment
      tags:
      - comments
  /photos:
    get:
      description: User can retrieve all photos and no need to login
      produces:
      - application/json
      responses:
        "200":
          description: Will send all photo datas
          schema:
            $ref: '#/definitions/entity.Response'
        "404":
          description: If there is no photo, error will appear
          schema:
            $ref: '#/definitions/entity.ResponseFailed'
      summary: Get all photos
      tags:
      - photos
    post:
      description: User can upload a photo.
      parameters:
      - description: photo title
        in: formData
        name: title
        required: true
        type: string
      - description: photo caption
        in: formData
        name: caption
        required: true
        type: string
      - description: photo url
        in: formData
        name: photo_url
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: If all of the parameters filled and you're logged in
          schema:
            $ref: '#/definitions/entity.Response'
        "404":
          description: If you are not login or some parameters not filled, error will
            appear
          schema:
            $ref: '#/definitions/entity.ResponseFailed'
      security:
      - Bearer: []
      summary: Upload a photo
      tags:
      - photos
  /photos/{id}:
    delete:
      description: User can delete their own photo.
      parameters:
      - description: photo id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: If photo is exist and it's your own photo
          schema:
            $ref: '#/definitions/entity.Response'
        "400":
          description: If the photo is not your own or if the photo doesn't exist,
            error will appear
          schema:
            $ref: '#/definitions/entity.ResponseFailed'
      security:
      - Bearer: []
      summary: Delete a photo
      tags:
      - photos
    get:
      description: User can retrieve a photo and no need to login
      parameters:
      - description: photo id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: If a photo's id matches with the parameter
          schema:
            $ref: '#/definitions/entity.Response'
        "404":
          description: If the photo's id doesn't match with the parameter, error will
            appear
          schema:
            $ref: '#/definitions/entity.ResponseFailed'
      summary: Get one photo
      tags:
      - photos
    put:
      description: User can edit their own photo.
      parameters:
      - description: photo id
        in: path
        name: id
        required: true
        type: integer
      - description: photo title
        in: formData
        name: title
        required: true
        type: string
      - description: photo caption
        in: formData
        name: caption
        required: true
        type: string
      - description: photo url
        in: formData
        name: photo_url
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: If the parameters are valid
          schema:
            $ref: '#/definitions/entity.Response'
        "401":
          description: If there is something wrong, error will appear
          schema:
            $ref: '#/definitions/entity.ResponseFailed'
      security:
      - Bearer: []
      summary: Edit a photo
      tags:
      - photos
  /social-media:
    get:
      description: User can retrieve all social media and no need to login
      produces:
      - application/json
      responses:
        "200":
          description: Will send all social media datas
          schema:
            $ref: '#/definitions/entity.Response'
        "404":
          description: If there is no social media, error will appear
          schema:
            $ref: '#/definitions/entity.ResponseFailed'
      summary: Get all social media
      tags:
      - social-medias
    post:
      description: User can create a social media.
      parameters:
      - description: social media name
        in: formData
        name: name
        required: true
        type: string
      - description: social media url
        in: formData
        name: social_media_url
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: If all of the parameters filled and you are logged in
          schema:
            $ref: '#/definitions/entity.Response'
        "401":
          description: If you are not login or some parameters not filled, error will
            appear
          schema:
            $ref: '#/definitions/entity.ResponseFailed'
      security:
      - Bearer: []
      summary: Create a social media
      tags:
      - social-medias
  /social-media/{id}:
    delete:
      description: User can delete their own social media.
      parameters:
      - description: social media id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: If social media is exist and it's your own social media
          schema:
            $ref: '#/definitions/entity.ResponseSuccess'
        "400":
          description: If social media's id is not your own or if the comment doesn't
            exist, error will appear
          schema:
            $ref: '#/definitions/entity.ResponseFailed'
      security:
      - Bearer: []
      summary: Delete a social media
      tags:
      - social-medias
    get:
      description: User can retrieve a social media and doesn't need to login
      parameters:
      - description: social media id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: If a social media's id matches with the parameter
          schema:
            $ref: '#/definitions/entity.Response'
        "404":
          description: If the social media's id doesn't match with the parameter,
            error will appear
          schema:
            $ref: '#/definitions/entity.ResponseFailed'
      summary: Get one social media
      tags:
      - social-medias
    put:
      description: User can edit their own social media.
      parameters:
      - description: social media id
        in: path
        name: id
        required: true
        type: integer
      - description: social media name
        in: formData
        name: name
        required: true
        type: string
      - description: social media url
        in: formData
        name: social_media_url
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: If all the parameters are valid
          schema:
            $ref: '#/definitions/entity.Response'
        "400":
          description: If there is something wrong, error will appear
          schema:
            $ref: '#/definitions/entity.ResponseFailed'
      security:
      - Bearer: []
      summary: Edit a social media
      tags:
      - social-medias
  /users/login:
    post:
      description: Login to system
      parameters:
      - description: User's email
        in: formData
        name: email
        required: true
        type: string
      - description: User's password
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Jika email dan password benar, maka akan mendapatkan token
          schema:
            $ref: '#/definitions/entity.ResponseLogin'
        "401":
          description: Jika email dan password salah, maka akan muncul error
          schema:
            $ref: '#/definitions/entity.ResponseFailed'
      summary: User Login
      tags:
      - users
  /users/register:
    post:
      description: Register an account
      parameters:
      - description: User's email
        in: formData
        name: email
        required: true
        type: string
      - description: User's username
        in: formData
        name: username
        required: true
        type: string
      - description: User's password
        in: formData
        name: password
        required: true
        type: string
      - description: User's age
        in: formData
        name: age
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: 'Jika semua field benar, maka akun akan dibuat '
          schema:
            $ref: '#/definitions/entity.ResponseRegister'
        "400":
          description: Jika terdapat kesalahan akan muncul error
          schema:
            $ref: '#/definitions/entity.ResponseFailed'
      summary: User Register
      tags:
      - users
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
